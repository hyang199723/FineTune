import tkinter as tkfrom tkinter import filedialog, Menufrom PIL import Image, ImageTkclass ImageAnnotationApp:    def __init__(self, root):        self.root = root        self.root.title("Image Annotation GUI")        # Menu bar        self.menu_bar = Menu(self.root)        self.root.config(menu=self.menu_bar)        # File menu        self.file_menu = Menu(self.menu_bar, tearoff=0)        self.file_menu.add_command(label="Read Images from Local", command=self.open_image)        self.file_menu.add_command(label="Export Result", command=self.export_result)                # Add file menu to the menu bar        self.menu_bar.add_cascade(label="File", menu=self.file_menu)        # Canvas for image display        self.canvas = tk.Canvas(self.root, bg='grey')        self.canvas.pack(fill=tk.BOTH, expand=True)                # Binding the left mouse click event with the on_click event        self.canvas.bind("<Button-1>", self.on_click)        self.canvas.bind("<ButtonPress-1>", self.on_click_press)        self.canvas.bind("<ButtonRelease-1>", self.on_click_release)        self.canvas.bind("<B1-Motion>", self.on_mouse_drag)        # Image-related attributes        self.image_on_canvas = None        self.image = None                # Attributes for drawing the rectangle        self.rect_start_x = None        self.rect_start_y = None        self.current_rectangle = None        self.is_dragging = False    def open_image(self):        file_path = filedialog.askopenfilename()        if file_path:            self.image = Image.open(file_path)            self.image_for_tk = ImageTk.PhotoImage(self.image)            if self.image_on_canvas:                self.canvas.delete(self.image_on_canvas)            self.image_on_canvas = self.canvas.create_image(0, 0, anchor=tk.NW, image=self.image_for_tk)            self.canvas.config(scrollregion=self.canvas.bbox(tk.ALL))                    def on_click_press(self, event):        # This function is called when the mouse button is pressed        self.rect_start_x = event.x        self.rect_start_y = event.y        # Create a rectangle (initially with same start and end coordinates)        self.current_rectangle = self.canvas.create_rectangle(self.rect_start_x, self.rect_start_y,                                                              event.x, event.y,                                                              outline='blue', width=2)        self.is_dragging = False                def on_mouse_drag(self, event):        # This function is called when the mouse is moved with button pressed        self.is_dragging = True        # Update the rectangle's end coordinates to the current mouse position        self.canvas.coords(self.current_rectangle, self.rect_start_x, self.rect_start_y, event.x, event.y)        def on_click_release(self, event):        # This function is called when the mouse button is released        if self.is_dragging:            # Finish drawing the rectangle            upper_left = (self.rect_start_x, self.rect_start_y)            bottom_right = (event.x, event.y)            print(f"Rectangle - Upper Left: {upper_left}, Bottom Right: {bottom_right}")        else:            # This was a click, not a drag, so we handle it as a single point            print(f"Clicked at: x={event.x}, y={event.y}")        # Reset the dragging flag        self.is_dragging = False        # Remove the temporary rectangle        #self.canvas.delete(self.current_rectangle)        #self.current_rectangle = None                    def on_click(self, event):        # This function is called when the image is clicked        # The event object contains the x and y coordinates of the click event        print(f"Clicked at: x={event.x}, y={event.y}")    def export_result(self):        # Placeholder for the export functionality        # Implement the logic for exporting results here        print("Exporting results... (this is a placeholder function)")if __name__ == "__main__":    root = tk.Tk()    app = ImageAnnotationApp(root)    root.mainloop()